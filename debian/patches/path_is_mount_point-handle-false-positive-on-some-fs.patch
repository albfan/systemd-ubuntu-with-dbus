From: Didier Roche <didrocks@ubuntu.com>
Date: Mon, 9 Mar 2015 09:09:30 +0100
Subject: path_is_mount_point: handle false positive on some fs

path_is_mount_point detection mechanism was wrongly reporting every file
as mount point on file systems like overlayfs:
- name_to_handle_at is not supported
- stat() on directories returns a 0 st_dev (and so different from file stat())
In this case, we fall back to the slower path: directly reading /proc/mounts
and matching any mount point corresponding to the path if present. Ensure that
there isn't any hiding mounts.

Bug-Ubuntu: https://launchpad.net/bugs/1411140
---
 src/shared/path-util.c | 60 +++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 59 insertions(+), 1 deletion(-)

diff --git a/src/shared/path-util.c b/src/shared/path-util.c
index d5510bf..3577496 100644
--- a/src/shared/path-util.c
+++ b/src/shared/path-util.c
@@ -477,7 +477,9 @@ int path_is_mount_point(const char *t, bool allow_symlink) {
 
         union file_handle_union h = FILE_HANDLE_INIT;
         int mount_id = -1, mount_id_parent = -1;
-        _cleanup_free_ char *parent = NULL;
+        _cleanup_free_ char *parent = NULL, *path = NULL;
+        _cleanup_fclose_ FILE *f = NULL;
+        bool mountpoint_found = false;
         struct stat a, b;
         int r;
         bool nosupp = false;
@@ -553,7 +555,63 @@ fallback:
         if (r < 0)
                 return -errno;
 
+        /* if parent major block is 0, this can be an overlay fs,
+           fallback to reading /proc/self/mounts */
+        if (major(b.st_dev) == 0)
+                goto fallback_proc_mounts;
+
         return a.st_dev != b.st_dev;
+
+fallback_proc_mounts:
+        if (allow_symlink) {
+                r = readlink_and_make_absolute(t, &path);
+                // this can happen on sysfs, fallback to previous behavior
+                if (r < 0)
+                        return a.st_dev != b.st_dev;
+        } else
+                path = strdup(t);
+
+        f = fopen("/proc/self/mounts", "re");
+        if (!f)
+                return a.st_dev != b.st_dev;
+
+        for (;;) {
+                _cleanup_free_ char *mountpoint = NULL, *unesc_mountpoint = NULL;
+                r = fscanf(f,
+                          "%*s "       /* (1) fs spec */
+                          "%ms "       /* (2) mount point */
+                          "%*[^\n]",   /* not interested by other values */
+                          &mountpoint);
+                if (r != 1) {
+                        if (r == EOF)
+                                break;
+                        if (ferror(f) && errno)
+                                return a.st_dev != b.st_dev;
+
+                        continue;
+                }
+
+                unesc_mountpoint = cunescape(mountpoint);
+                if (!unesc_mountpoint)
+                        return -ENOMEM;
+
+                /* check that our mount point isn't hidden by a later mount of a parent dir */
+                if (mountpoint_found) {
+                        size_t l = strlen(unesc_mountpoint);
+                        if (strlen(path) > l &&
+                            path_startswith(path, unesc_mountpoint) &&
+                            (unesc_mountpoint[l-1] == '/' || path[l] == '/'))
+                                mountpoint_found = false;
+                }
+
+                if (path_equal(path, unesc_mountpoint))
+                        mountpoint_found = true;
+        }
+
+        if (mountpoint_found)
+                return 1;
+
+        return 0;
 }
 
 int path_is_read_only_fs(const char *path) {
