<?xml version='1.0'?> <!--*- Mode: nxml; nxml-child-indent: 2; indent-tabs-mode: nil -*-->
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<!--
This file is part of systemd.

Copyright 2014 Zbigniew Jędrzejewski-Szmek

systemd is free software; you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 2.1 of the License, or
(at your option) any later version.

systemd is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with systemd; If not, see <http://www.gnu.org/licenses/>.
-->

<refentry id="sd_event_add_signal" conditional="ENABLE_KDBUS">

  <refentryinfo>
    <title>sd_event_add_signal</title>
    <productname>systemd</productname>

    <authorgroup>
      <author>
        <contrib>More text</contrib>
        <firstname>Zbigniew</firstname>
        <surname>Jędrzejewski-Szmek</surname>
        <email>zbyszek@in.waw.pl</email>
      </author>
    </authorgroup>
  </refentryinfo>

  <refmeta>
    <refentrytitle>sd_event_add_signal</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
    <refname>sd_event_add_signal</refname>
    <refname>sd_event_source_get_signal</refname>

    <refpurpose>Add a signal event source to an event loop</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>#include &lt;systemd/sd-bus.h&gt;</funcsynopsisinfo>

      <funcprototype>
        <funcdef>int <function>sd_event_add_signal</function></funcdef>
        <paramdef>sd_event *<parameter>event</parameter></paramdef>
        <paramdef>sd_event_source **<parameter>source</parameter></paramdef>
        <paramdef>int <parameter>signal</parameter></paramdef>
        <paramdef>sd_event_signal_handler_t <parameter>handler</parameter></paramdef>
        <paramdef>void *<parameter>userdata</parameter></paramdef>
      </funcprototype>

      <funcprototype>
        <funcdef>typedef int (*<function>sd_event_signal_handler_t</function>)</funcdef>
        <paramdef>sd_event_source *<parameter>s</parameter></paramdef>
        <paramdef>const struct signalfd_siginfo *<parameter>si</parameter></paramdef>
        <paramdef>void *<parameter>userdata</parameter></paramdef>
      </funcprototype>

      <funcprototype>
        <funcdef>int <function>sd_event_source_get_signal</function></funcdef>
        <paramdef>sd_event_source *<parameter>source</parameter></paramdef>
      </funcprototype>

    </funcsynopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>

    <para><function>sd_event_add_signal()</function> adds a new signal
    event source to an event loop object. The event loop is specified
    in <parameter>event</parameter>, the event source is returned in
    the <parameter>source</parameter> parameter. The
    <parameter>signal</parameter> parameter specifies the signal to be handled
    (see
    <citerefentry><refentrytitle>signal</refentrytitle><manvolnum>7</manvolnum></citerefentry>).
    The <parameter>handler</parameter> must reference a function to
    call when the signal is delivered or be <constant>NULL</constant>.
    The handler function will be passed the
    <parameter>userdata</parameter> pointer, which may be chosen
    freely by the caller. The handler also receives a pointer to a
    <structname>const struct signalfd_siginfo</structname> containing
    the information about the received signal. See
    <citerefentry><refentrytitle>signalfd</refentrytitle><manvolnum>2</manvolnum></citerefentry>
    for further information.</para>

    <para>Only a single handler may be installed for a specific
    signal. The signal will be unblocked, and must be
    blocked when the function is called. If the handler is not
    specified (<parameter>handler</parameter> is
    <constant>NULL</constant>), a default handler which causes the
    program to exit will be used.  By default, the handler is enabled
    permanently (<constant>SD_EVENT_ON</constant>), but this may be
    changed with
    <citerefentry><refentrytitle>sd_event_source_set_enabled</refentrytitle><manvolnum>3</manvolnum></citerefentry>.
    If the handler function returns a negative error code, it will be
    disabled after the invocation, even if
    <constant>SD_EVENT_ON</constant> mode is set.
    </para>

    <para><function>sd_event_source_get_signal()</function> retrieves
    the configured signal number of a signal event source created
    previously with <function>sd_event_add_signal()</function>. It
    takes the event source object as the <parameter>source</parameter>
    parameter.</para>

  </refsect1>

  <refsect1>
    <title>Return Value</title>

    <para>On success, these functions return 0 or a positive
    integer. On failure, they return a negative errno-style error
    code. </para>
  </refsect1>

  <refsect1>
    <title>Errors</title>

    <para>Returned errors may indicate the following problems:</para>

    <variablelist>
      <varlistentry>
        <term><constant>-ENOMEM</constant></term>

        <listitem><para>Not enough memory to allocate an object.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><constant>-EINVAL</constant></term>

        <listitem><para>An invalid argument has been passed.</para></listitem>

      </varlistentry>

      <varlistentry>
        <term><constant>-EBUSY</constant></term>

        <listitem><para>An handler is already installed for this
        signal or the signal was not blocked previously.</para></listitem>

      </varlistentry>

      <varlistentry>
        <term><constant>-ESTALE</constant></term>

        <listitem><para>The event loop is already terminated.</para></listitem>

      </varlistentry>

      <varlistentry>
        <term><constant>-ECHILD</constant></term>

        <listitem><para>The event loop has been created in a different process.</para></listitem>

      </varlistentry>

    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>

    <para><function>sd_event_add_signal()</function> and the other functions
    described here are available as a shared library, which can be
    compiled and linked to with the
    <constant>libsystemd</constant> <citerefentry project='die-net'><refentrytitle>pkg-config</refentrytitle><manvolnum>1</manvolnum></citerefentry>
    file.</para>
  </refsect1>

  <refsect1>
    <title>See Also</title>

    <para>
      <citerefentry><refentrytitle>systemd</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>sd-event</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>sd_event_new</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>sd_event_add_time</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>sd_event_add_child</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>sd_event_add_defer</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>sd_event_source_set_enabled</refentrytitle><manvolnum>3</manvolnum></citerefentry>
    </para>
  </refsect1>

</refentry>
